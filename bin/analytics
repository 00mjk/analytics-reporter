#!/usr/bin/env node

/*
 * Run all analytics reports output JSON to disk.
 *
 * Usage: analytics
 *
 * Defaults to printing JSON to STDOUT.
 *
 * --output: Output to a directory.
 * --publish: Publish to an S3 bucket.
 * --only: only run one report.
 * --debug: print debug details on STDOUT
 */

var Analytics = require("../analytics"),
    config = require("../config"),
    fs = require("fs"),
    path = require('path'),
    async = require("async");


// AWS credentials are looked for in env vars or in ~/.aws/config.
// AWS bucket and path need to be set in env vars mentioned in config.js.

var AWS = require("aws-sdk");

var publish = function(name, data, extension, options, callback) {
  if (options.debug) console.log("[" + name + "] Publishing to " + config.aws.bucket + "...");

  new AWS.S3({params: {Bucket: config.aws.bucket}}).upload({
    Key: config.aws.path + "/" + name + extension,
    Body: data,
    ContentType: "application/json",
    ACL: "public-read",
    CacheControl: "max-age=" + (config.aws.cache || 0)
  }, callback);
};


function makeCSV(objArray) {
    var str = Object.keys(objArray[0]) + '\r\n';
    var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;

    for (var i = 0; i < array.length; i++) {
        var line = '';
        for (var index in array[i]) {
            if (line != '') line += ','

            line += '"' + array[i][index] + '"';
        }
        str += line + '\r\n';
    }
    return str;
}


var run = function(options) {
  if (!options) options = {};
  if (options.debug) options.verbose = options.debug;
  if (options.verbose) options.debug = options.verbose;

  // can be overridden to only do one report
  var names = options.only ? [options.only] : Object.keys(Analytics.reports);

  var eachReport = function(name, done) {
    var report = Analytics.reports[name];

    if (options.debug) console.log("\n[" + report.name + "] Fetching...");
    Analytics.query(report, function(err, data) {
        if (err) return console.log("ERROR AFTER QUERYING: " + JSON.stringify(err));

        if (options.debug) console.log("[" + report.name + "] Saving report data...");
        var json = JSON.stringify(data, null, 2);
        var csv = makeCSV(data['data']);

        var written = function(err) {
          if (err)
            console.error("ERROR AFTER WRITING: " + JSON.stringify(err));
          else if (options.debug)
            console.log("[" + report.name + "] Done.");
          done();
        };

        if (options.publish){
          publish(report.name, json, '.json', options, written);
          if (options.csv)
            publish(report.name, csv, '.csv', options, written);
        }
        else if (options.output && (typeof(options.output) == "string")){
          fs.writeFile(path.join(options.output, (report.name + ".json")), json, written);
          if (options.csv)
            fs.writeFile(path.join(options.output, (report.name + ".csv")), csv, written);
        }
        else {
          // could be split on \n\n
          console.log(json + "\n");
          if (options.csv)
            console.log(csv + "\n");
          written();
        }
    });
  };

  async.eachSeries(names, eachReport, function(err) {
    if (err) {
      console.error(err);
      process.exit(1);
    }

    if (options.debug) console.log("All done.");
  });
};

run(require('minimist')(process.argv.slice(2)));
